import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import wiener

# Load image
img_path = "image.jfif"
image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

if image is None:
    print("Error: Could not load image.")
    exit()

# Normalize image for better processing
image = cv2.normalize(image, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)

# Function to add Gaussian noise
def add_gaussian_noise(image, mean=0, std=25):
    noise = np.random.normal(mean, std, image.shape).astype(np.uint8)
    noisy_image = cv2.add(image, noise)
    return cv2.normalize(noisy_image, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)

# Function to add Salt & Pepper noise
def add_salt_and_pepper_noise(image, salt_prob=0.05, pepper_prob=0.05):
    noisy_image = np.copy(image)
    salt_mask = np.random.uniform(0, 1, image.shape) < salt_prob
    noisy_image[salt_mask] = 255
    pepper_mask = np.random.uniform(0, 1, image.shape) < pepper_prob
    noisy_image[pepper_mask] = 0
    return noisy_image

# Generate noisy images
gaussian_noisy_image = add_gaussian_noise(image, mean=0, std=30)
salt_pepper_noisy_image = add_salt_and_pepper_noise(image, salt_prob=0.05, pepper_prob=0.05)

# Apply Noise Removal Filters
mean_filtered = cv2.blur(gaussian_noisy_image, (5, 5))  # Mean Filter
gaussian_filtered = cv2.GaussianBlur(gaussian_noisy_image, (5, 5), 0)  # Gaussian Filter
wiener_filtered = wiener(gaussian_noisy_image, (5, 5))  # Wiener Filter (Deblurring)
wiener_filtered = np.clip(wiener_filtered, 0, 255).astype(np.uint8)

# Display results
titles = [
    "Original", "Gaussian Noise", "Salt & Pepper Noise",
    "Mean Filter", "Gaussian Filter", "Wiener Filter"
]
images = [image, gaussian_noisy_image, salt_pepper_noisy_image, mean_filtered, gaussian_filtered, wiener_filtered]

plt.figure(figsize=(12, 8))
for i in range(6):
    plt.subplot(2, 3, i + 1)
    plt.title(titles[i])
    plt.imshow(images[i], cmap="gray")
    plt.axis("off")

plt.tight_layout()
plt.show()
